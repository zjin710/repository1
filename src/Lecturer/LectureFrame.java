/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author user
 */
package Lecturer;

import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.io.*;

import Admin.Login;
import Admin.UpdateProfile;

public class LectureFrame extends javax.swing.JFrame {

    /**
     * Creates new form LectureFrame
   //  * @param userId the UserID to be set
     */
    public LectureFrame(String userID) {
        initComponents();
        findAndSetData(userID);
        loadTableData(userID);
    }
    
    private void findAndSetData(String userID) {
        //Read textfile
        String filename = "staff.txt";
        
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts[0].equals(userID)){
                    LabelUserIDANS.setText(parts[0]);
                    LabelNameANS.setText(parts[1]);
                    LabelPasswordANS.setText(parts[2]);
                    LabelEmailANS.setText(parts[3]);
                    LabelPhoneNumberANS.setText(parts[4]);
                    LabelDepartmentANS.setText(parts[5]);
                    LabelRoleANS.setText(parts[6]);
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public void loadTableData(String userID){
        DefaultTableModel model = (DefaultTableModel) TablePresentationRequests.getModel();
        //Read textfile
        String textFile = "Presentation.txt";
        try (BufferedReader br = new BufferedReader(new FileReader(textFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                //Split each line with commas
                String[] rowData = line.split(",");
                //Find whether the lectureID matches the currently logged in lectureID
                if (rowData[8].equals(userID)) {
                    Object[] selectedData = {rowData[0], rowData[1], rowData[2], rowData[3], rowData[4], rowData[5], rowData[6], rowData[7], rowData[11]};
                    model.addRow(selectedData);
                }
            }
            TablePresentationRequests.setModel(model);
        } catch (IOException e) {
            //Catch and print any IO exceptions
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelPresentationRequests = new javax.swing.JLabel();
        LabelTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePresentationRequests = new javax.swing.JTable();
        ButtonReject = new javax.swing.JButton();
        ButtonViewSecondMarker = new javax.swing.JButton();
        ButtonAccept = new javax.swing.JButton();
        ButtonEvaluateReport = new javax.swing.JButton();
        ButtonStudentInfo = new javax.swing.JButton();
        LabelPersonalInformation1 = new javax.swing.JLabel();
        ButtonComplete = new javax.swing.JButton();
        LabelUserIDANS = new javax.swing.JLabel();
        LabelUserID = new javax.swing.JLabel();
        LabelNameANS = new javax.swing.JLabel();
        LabelName = new javax.swing.JLabel();
        LabelPhoneNumber = new javax.swing.JLabel();
        LabelEmail = new javax.swing.JLabel();
        LabelPhoneNumberANS = new javax.swing.JLabel();
        LabelEmailANS = new javax.swing.JLabel();
        LabelDepartment = new javax.swing.JLabel();
        LabelRole = new javax.swing.JLabel();
        LabelDepartmentANS = new javax.swing.JLabel();
        LabelRoleANS = new javax.swing.JLabel();
        ButtonUpdateProfile = new javax.swing.JButton();
        ButtonExitLogin = new javax.swing.JButton();
        LabelPasswordANS = new javax.swing.JLabel();
        LabelPassword = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelPresentationRequests.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        LabelPresentationRequests.setText("Presentation Requests");

        LabelTitle.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        LabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTitle.setText("Academic Guidance Hub (AGH)");

        TablePresentationRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StudentID", "Name", "IntakeID", "ProjectID", "PresDate", "PresTime", "Status", "PresStatus", "SM Acceptance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablePresentationRequests);
        if (TablePresentationRequests.getColumnModel().getColumnCount() > 0) {
            TablePresentationRequests.getColumnModel().getColumn(0).setResizable(false);
            TablePresentationRequests.getColumnModel().getColumn(1).setResizable(false);
            TablePresentationRequests.getColumnModel().getColumn(2).setResizable(false);
            TablePresentationRequests.getColumnModel().getColumn(3).setResizable(false);
            TablePresentationRequests.getColumnModel().getColumn(4).setResizable(false);
            TablePresentationRequests.getColumnModel().getColumn(5).setResizable(false);
            TablePresentationRequests.getColumnModel().getColumn(6).setResizable(false);
            TablePresentationRequests.getColumnModel().getColumn(7).setResizable(false);
            TablePresentationRequests.getColumnModel().getColumn(8).setResizable(false);
        }

        ButtonReject.setText("Reject");
        ButtonReject.setActionCommand("View Presentation Request");
        ButtonReject.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ButtonReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRejectActionPerformed(evt);
            }
        });

        ButtonViewSecondMarker.setText("View Second Marker Acceptance");
        ButtonViewSecondMarker.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ButtonViewSecondMarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewSecondMarkerActionPerformed(evt);
            }
        });

        ButtonAccept.setText("Accept");
        ButtonAccept.setActionCommand("View Presentation Request");
        ButtonAccept.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ButtonAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAcceptActionPerformed(evt);
            }
        });

        ButtonEvaluateReport.setText("Evaluate Report");
        ButtonEvaluateReport.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ButtonEvaluateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEvaluateReportActionPerformed(evt);
            }
        });

        ButtonStudentInfo.setText("Student Info");
        ButtonStudentInfo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ButtonStudentInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStudentInfoActionPerformed(evt);
            }
        });

        LabelPersonalInformation1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        LabelPersonalInformation1.setText("Personal Information");

        ButtonComplete.setText("Complete");
        ButtonComplete.setActionCommand("View Presentation Request");
        ButtonComplete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ButtonComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCompleteActionPerformed(evt);
            }
        });

        LabelUserIDANS.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelUserIDANS.setText("UserID");

        LabelUserID.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelUserID.setText("UserID:");

        LabelNameANS.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelNameANS.setText("Name");

        LabelName.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelName.setText("Name:");

        LabelPhoneNumber.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelPhoneNumber.setText("PhoneNumber:");

        LabelEmail.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelEmail.setText("Email:");

        LabelPhoneNumberANS.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelPhoneNumberANS.setText("PhoneNumber");

        LabelEmailANS.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelEmailANS.setText("Email");

        LabelDepartment.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelDepartment.setText("Department:");

        LabelRole.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelRole.setText("Role:");

        LabelDepartmentANS.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelDepartmentANS.setText("Department");

        LabelRoleANS.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelRoleANS.setText("Role");

        ButtonUpdateProfile.setText("Update Profile");
        ButtonUpdateProfile.setActionCommand("View Presentation Request");
        ButtonUpdateProfile.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ButtonUpdateProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUpdateProfileActionPerformed(evt);
            }
        });

        ButtonExitLogin.setText("Exit Login");
        ButtonExitLogin.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ButtonExitLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExitLoginActionPerformed(evt);
            }
        });

        LabelPasswordANS.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelPasswordANS.setText("Password");

        LabelPassword.setFont(new java.awt.Font("Tempus Sans ITC", 0, 16)); // NOI18N
        LabelPassword.setText("Password:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelPresentationRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ButtonAccept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ButtonStudentInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ButtonReject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ButtonViewSecondMarker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ButtonComplete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ButtonEvaluateReport, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                                .addGap(40, 40, 40)
                                .addComponent(ButtonExitLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelEmailANS))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelNameANS))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelUserID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelUserIDANS))
                            .addComponent(LabelPersonalInformation1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelPhoneNumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelPhoneNumberANS))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelRole)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelRoleANS))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelDepartment)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelDepartmentANS))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(ButtonUpdateProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LabelPassword)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelPasswordANS)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelPresentationRequests)
                    .addComponent(LabelPersonalInformation1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelUserID)
                            .addComponent(LabelUserIDANS))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelPassword)
                            .addComponent(LabelPasswordANS))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelName)
                            .addComponent(LabelNameANS))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelEmail)
                            .addComponent(LabelEmailANS))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelPhoneNumber)
                            .addComponent(LabelPhoneNumberANS))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelDepartment)
                            .addComponent(LabelDepartmentANS))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelRole)
                            .addComponent(LabelRoleANS))
                        .addGap(18, 18, 18)
                        .addComponent(ButtonUpdateProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ButtonReject, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ButtonStudentInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonViewSecondMarker, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonEvaluateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ButtonExitLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRejectActionPerformed
        // TODO add your handling code here:
        //Get selected rows
        int selectedRow = TablePresentationRequests.getSelectedRow();
        String lectureID = LabelUserIDANS.getText();
        // Check if any row is selected
        if (selectedRow != -1) {
            // Get the value of the current status column
            String status = (String) TablePresentationRequests.getModel().getValueAt(selectedRow, 6);
            // Show already accepted message
            if (status.equals("Accept")) {
                JOptionPane.showMessageDialog(null, "This entry has already been accepted.", "Already Accepted", JOptionPane.WARNING_MESSAGE);
            // Show already rejected message
            } else if (status.equals("Reject")) {
                JOptionPane.showMessageDialog(null, "This entry has already been rejected.", "Already Rejected", JOptionPane.WARNING_MESSAGE);
             // Update status to "Reject"
            } else {
                TablePresentationRequests.getModel().setValueAt("Reject", selectedRow, 6);
                JOptionPane.showMessageDialog(null, "This entry has been Rejected.", "Rejected", JOptionPane.INFORMATION_MESSAGE);

                // Get the entire row data
                int columnCount = TablePresentationRequests.getModel().getColumnCount();
                StringBuilder updatedLine = new StringBuilder();
                for (int col = 0; col < columnCount; col++) {
                        if (col == 8) {
                            updatedLine.append(lectureID).append(",");
                        }
                    updatedLine.append(TablePresentationRequests.getModel().getValueAt(selectedRow, col)).append(",");
                }
                //Add words after row
                updatedLine.append("NULL,NULL");

                // Read the file and update the specific line
                File studentFile = new File("Presentation.txt");
                List<String> fileContent = new ArrayList<>();
                try (BufferedReader reader = new BufferedReader(new FileReader(studentFile))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] lineData = line.split(",");
                        if (lineData[0].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 0)) &&
                            lineData[2].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 2)) &&
                            lineData[3].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 3))) {
                            // Update the matching line
                            fileContent.add(updatedLine.toString());
                        } else {
                            fileContent.add(line);
                        }
                    }
                } catch (IOException e) {
                    // Catch and print IO exception
                    e.printStackTrace();
                }

                // Write the updated content back to the file
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(studentFile))) {
                    for (String line : fileContent) {
                        writer.write(line);
                        writer.newLine();
                    }
                } catch (IOException e) {
                    // Catch and print IO exception
                    e.printStackTrace();
                }
            }
        } else {
            // Show warning message if no row is selected
            JOptionPane.showMessageDialog(null, "Please select a row.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ButtonRejectActionPerformed

    private void ButtonViewSecondMarkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewSecondMarkerActionPerformed
        // TODO add your handling code here:
        String secondMarkerID = LabelUserIDANS.getText();
        //Open another frame
        SecondMarkerFrame SMFrame = new SecondMarkerFrame(secondMarkerID);
        SMFrame.setVisible(true);
    }//GEN-LAST:event_ButtonViewSecondMarkerActionPerformed

    private void ButtonAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAcceptActionPerformed
        // TODO add your handling code here:
        //Get selected rows
        int selectedRow = TablePresentationRequests.getSelectedRow();
        String lectureID = LabelUserIDANS.getText();
        // Check if any row is selected    
        if (selectedRow != -1) {
            // Get the value of the current status column
            String status = (String) TablePresentationRequests.getModel().getValueAt(selectedRow, 6);
            // Show already accepted message
            if (status.equals("Accept")) {
                JOptionPane.showMessageDialog(null, "This entry has already been accepted.", "Already Accepted", JOptionPane.WARNING_MESSAGE);
            // Show already rejected message
            } else if (status.equals("Reject")) {
                JOptionPane.showMessageDialog(null, "This entry has already been rejected.", "Already Rejected", JOptionPane.WARNING_MESSAGE);
            // Update status to "Accept" and "Incomplete"
            } else {
                TablePresentationRequests.getModel().setValueAt("Accept", selectedRow, 6);
                TablePresentationRequests.getModel().setValueAt("Incomplete", selectedRow, 7);
                JOptionPane.showMessageDialog(null, "This entry has been accepted.", "Accepted", JOptionPane.INFORMATION_MESSAGE);

                // Get the entire row data
                int columnCount = TablePresentationRequests.getModel().getColumnCount();
                StringBuilder updatedLine = new StringBuilder();
                for (int col = 0; col < columnCount; col++) {
                        if (col == 8) {
                            updatedLine.append(lectureID).append(",");
                        }
                    updatedLine.append(TablePresentationRequests.getModel().getValueAt(selectedRow, col)).append(",");
                }
                //Add words after row
                updatedLine.append("NULL,NULL");   

                // Read the file and update the specific line
                File studentFile = new File("Presentation.txt");
                List<String> fileContent = new ArrayList<>();
                try (BufferedReader reader = new BufferedReader(new FileReader(studentFile))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] lineData = line.split(",");
                        if (lineData[0].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 0)) &&
                            lineData[2].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 2)) &&
                            lineData[3].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 3))) {
                            fileContent.add(updatedLine.toString());
                        } else {
                            fileContent.add(line);
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }

                // Write the updated content back to the file
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(studentFile))) {
                    for (String line : fileContent) {
                        writer.write(line);
                        writer.newLine();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } else {
            // Show warning message if no row is selected
            JOptionPane.showMessageDialog(null, "Please select a row.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ButtonAcceptActionPerformed

    private void ButtonEvaluateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEvaluateReportActionPerformed
        // TODO add your handling code here:
        //Get selected rows
        int selectedRow = TablePresentationRequests.getSelectedRow();
        // Check if any row is selected    
        if (selectedRow != -1) {
            // Get the value of the current status column
            String status = (String) TablePresentationRequests.getModel().getValueAt(selectedRow, 7);

            if (status.equals("Incomplete")) {
                JOptionPane.showMessageDialog(null, "This presentation has not yet been completed.", "Incomplete Presentation", JOptionPane.WARNING_MESSAGE);
            } else if (status.equals("NULL")) {
                JOptionPane.showMessageDialog(null, "This presentation has not yet been accepted or rejected.", "Incomplete Presentation", JOptionPane.WARNING_MESSAGE);
            } else {
                Object StudentID = TablePresentationRequests.getValueAt(selectedRow, 0);
                Object ProjectID = TablePresentationRequests.getValueAt(selectedRow, 3);
                // Open another frame
                ReportFrame reportFrame = new ReportFrame(StudentID.toString(), ProjectID.toString());
                reportFrame.setVisible(true);
            }
        } else {
            // Show warning message if no row is selected
            JOptionPane.showMessageDialog(null, "Please select a row.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ButtonEvaluateReportActionPerformed

    private void ButtonStudentInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStudentInfoActionPerformed
        // TODO add your handling code here:
        //Get selected rows
        int selectedRow = TablePresentationRequests.getSelectedRow();
        // Check if any row is selected    
        if (selectedRow != -1) {
            Object studentID = TablePresentationRequests.getValueAt(selectedRow, 0);
            Object ProjectID = TablePresentationRequests.getValueAt(selectedRow, 3);
            //Open another frame
            StudentInfoFrame studentInfoFrame = new StudentInfoFrame(studentID.toString(), ProjectID.toString());
            studentInfoFrame.setVisible(true);
            }
        else {
            // Show warning message if no row is selected
            JOptionPane.showMessageDialog(null, "Please select a row.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ButtonStudentInfoActionPerformed

    private void ButtonCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCompleteActionPerformed
        // TODO add your handling code here:
        //Get selected rows
        int selectedRow = TablePresentationRequests.getSelectedRow();
        String lectureID = LabelUserIDANS.getText();
        // Check if any row is selected
        if (selectedRow != -1) {
            // Get the value of the current status column
            String status = (String) TablePresentationRequests.getModel().getValueAt(selectedRow, 7);

            if (status.equals("Complete")) {
                JOptionPane.showMessageDialog(null, "This entry has already been Completed.", "Already Completed", JOptionPane.WARNING_MESSAGE);
            } else if (status.equals("NULL")) {
                JOptionPane.showMessageDialog(null, "This entry hasn't been accepted / rejected, or has already been rejected.", "Not Accepted or Rejected", JOptionPane.WARNING_MESSAGE);
            } else {
                TablePresentationRequests.getModel().setValueAt("Complete", selectedRow, 7);
                JOptionPane.showMessageDialog(null, "This entry has been Completed.", "Completed", JOptionPane.INFORMATION_MESSAGE);

                // Get the entire row data
                int columnCount = TablePresentationRequests.getModel().getColumnCount();
                StringBuilder updatedLine = new StringBuilder();
                for (int col = 0; col < columnCount; col++) {
                        if (col == 8) {
                            updatedLine.append(lectureID).append(",");
                        }
                    updatedLine.append(TablePresentationRequests.getModel().getValueAt(selectedRow, col)).append(",");
                }
                updatedLine.append("NULL,NULL");

                // Read the file and update the specific line
                File studentFile = new File("Presentation.txt");
                List<String> fileContent = new ArrayList<>();
                try (BufferedReader reader = new BufferedReader(new FileReader(studentFile))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] lineData = line.split(",");
                        if (lineData[0].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 0)) &&
                            lineData[2].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 2)) &&
                            lineData[3].equals((String) TablePresentationRequests.getModel().getValueAt(selectedRow, 3))) {
                            fileContent.add(updatedLine.toString());
                        } else {
                            fileContent.add(line);
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }

                // Write the updated content back to the file
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(studentFile))) {
                    for (String line : fileContent) {
                        writer.write(line);
                        writer.newLine();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } else {
            // Show warning message if no row is selected
            JOptionPane.showMessageDialog(null, "Please select a row.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ButtonCompleteActionPerformed

    private void ButtonUpdateProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUpdateProfileActionPerformed
        // TODO add your handling code here:
        String userid = LabelUserIDANS.getText();
        String username = LabelNameANS.getText();
        String userpassword = LabelPasswordANS.getText();
        String useremail = LabelEmailANS.getText();
        String userphonenum = LabelPhoneNumberANS.getText();
        String userdepartment = LabelDepartmentANS.getText();
        String role = LabelRoleANS.getText();
        // Dispose of the current frame
        dispose();
        //Open another frame
        UpdateProfile UP = new UpdateProfile(userid, username, userpassword, useremail, userphonenum, userdepartment, role, this);
        UP.setVisible(true);
    }//GEN-LAST:event_ButtonUpdateProfileActionPerformed

    private void ButtonExitLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExitLoginActionPerformed
        // TODO add your handling code here:
        // Dispose of the current frame
        dispose();
        //Open another frame
        Login loginFrame = new Login();
        loginFrame.setVisible(true);
    }//GEN-LAST:event_ButtonExitLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LectureFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LectureFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LectureFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LectureFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new LectureFrame("").setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAccept;
    private javax.swing.JButton ButtonComplete;
    private javax.swing.JButton ButtonEvaluateReport;
    private javax.swing.JButton ButtonExitLogin;
    private javax.swing.JButton ButtonReject;
    private javax.swing.JButton ButtonStudentInfo;
    private javax.swing.JButton ButtonUpdateProfile;
    private javax.swing.JButton ButtonViewSecondMarker;
    private javax.swing.JLabel LabelDepartment;
    private javax.swing.JLabel LabelDepartmentANS;
    private javax.swing.JLabel LabelEmail;
    private javax.swing.JLabel LabelEmailANS;
    private javax.swing.JLabel LabelName;
    private javax.swing.JLabel LabelNameANS;
    private javax.swing.JLabel LabelPassword;
    private javax.swing.JLabel LabelPasswordANS;
    private javax.swing.JLabel LabelPersonalInformation1;
    private javax.swing.JLabel LabelPhoneNumber;
    private javax.swing.JLabel LabelPhoneNumberANS;
    private javax.swing.JLabel LabelPresentationRequests;
    private javax.swing.JLabel LabelRole;
    private javax.swing.JLabel LabelRoleANS;
    private javax.swing.JLabel LabelTitle;
    private javax.swing.JLabel LabelUserID;
    private javax.swing.JLabel LabelUserIDANS;
    private javax.swing.JTable TablePresentationRequests;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
